FROM lsiobase/ubuntu:jammy

ENV \
 LIBVA_DRIVERS_PATH="/usr/lib/x86_64-linux-gnu/dri" \
 LD_LIBRARY_PATH="/usr/lib/x86_64-linux-gnu" \
 NVIDIA_DRIVER_CAPABILITIES="compute,video,utility" \
 NVIDIA_VISIBLE_DEVICES="all" \
 HANDBRAKE=1.7.3

ENV WEB_UI_PORT="8265" SERVER_PORT="8266" NODE_PORT="8267" PUID="1000" PGID="1000" UMASK="002" TZ="Etc/UTC" HOME="/home/Tdarr"

COPY docker/root/ /

# handle deps
RUN apt-get update &&  \
    apt-get install -y \
        software-properties-common \
        git \
        trash-cli

RUN mkdir -p \
        /app \
        /logs \
        /temp \
        "${HOME}" && \
        useradd -u ${PUID} -U -d ${HOME} -s /bin/false Tdarr && \
        usermod -G users Tdarr
    
RUN apt-get update && \
    apt-get install -y \
        curl \
        unzip \
        mkvtoolnix

# CCExtractor dependencies
RUN apt-get update && \
    apt-get install -y \
        libgpac-dev \
        libglew-dev \
        libglfw3-dev \
        cmake \
        gcc \
        libcurl4-gnutls-dev \
        tesseract-ocr \
        libtesseract-dev \
        libleptonica-dev \
        clang \
        libclang-dev

# CCExtractor
RUN git clone --branch v0.94 https://github.com/CCExtractor/ccextractor.git && \
    cd ccextractor/linux && \ 
    ./build -without-rust && \
    mv ./ccextractor /usr/bin/ccextractor && \
    cd / && rm -rf /ccextractor

# Setup Intel Package Repository
RUN if uname -m | grep -q x86; then \
        curl -sSL https://repositories.intel.com/gpu/intel-graphics.key | \
            gpg --dearmor --output /usr/share/keyrings/intel-graphics.gpg && \
        echo "deb [arch=amd64,i386 signed-by=/usr/share/keyrings/intel-graphics.gpg] https://repositories.intel.com/gpu/ubuntu jammy client" | \
            tee /etc/apt/sources.list.d/intel-gpu-jammy.list && \
        apt-get update ; \
    fi

# Install Intel Compute, Media and Display runtimes
RUN if uname -m | grep -q x86; then \
        apt install -y \
            intel-opencl-icd \
            intel-level-zero-gpu \
            level-zero \
            intel-media-va-driver-non-free \
            libmfx1 \
            libmfxgen1 \
            libvpl2 \
            libegl-mesa0 \
            libegl1-mesa \
            libegl1-mesa-dev \
            libgbm1 \
            libgl1-mesa-dev \
            libgl1-mesa-dri \
            libglapi-mesa \
            libgles2-mesa-dev \
            libglx-mesa0 \
            libigdgmm12 \
            libxatracker2 \
            mesa-va-drivers \
            mesa-vdpau-drivers \
            mesa-vulkan-drivers \
            va-driver-all \
            vainfo \
            hwinfo \
            clinfo ; \
    fi

# FFmpeg
RUN if uname -m | grep -q x86; then \
        # curl -LO https://repo.jellyfin.org/releases/server/ubuntu/versions/jellyfin-ffmpeg/6.0.1-3/jellyfin-ffmpeg6_6.0.1-3-focal_amd64.deb && \
        # apt-get install -y \
        # ./jellyfin-ffmpeg6_6.0.1-3-focal_amd64.deb && \
        # rm -rf ./jellyfin-ffmpeg6_6.0.1-3-focal_amd64.deb && \
        # ln -s /usr/lib/jellyfin-ffmpeg/ffmpeg /usr/local/bin/ffmpeg && \
        # ln -s /usr/lib/jellyfin-ffmpeg/ffmpeg /usr/local/bin/tdarr-ffmpeg ; \
        apt update && \
        apt install -y \
            ffmpeg ; \
    fi

# HandBrake dependencies
RUN if uname -m | grep -q x86; then \
        apt-get update && \
        apt-get install -y \
            autoconf \
            automake \
            build-essential \
            cmake \
            git \
            libass-dev \
            libbz2-dev \
            libfontconfig-dev \
            libfreetype-dev \
            libfribidi-dev \
            libharfbuzz-dev \
            libjansson-dev \
            liblzma-dev \
            libmp3lame-dev \
            libnuma-dev \
            libogg-dev \
            libopus-dev \
            libsamplerate0-dev \
            libspeex-dev \
            libtheora-dev \
            libtool \
            libtool-bin \
            libturbojpeg0-dev \
            libvorbis-dev \
            libx264-dev \
            libxml2-dev \
            libvpx-dev \
            m4 \
            make \
            meson \
            nasm \
            ninja-build \
            patch \
            pkg-config \
            tar \
            zlib1g-dev \
            # QSV dependencies
            libva-dev \
            libdrm-dev ; \
    fi

# HandBrake install
RUN if uname -m | grep -q x86; then \
        rm -rdf /tmp/handbrake && \
        mkdir -p /tmp/handbrake && \
        git clone \
            --branch ${HANDBRAKE} \
            --depth 1 https://github.com/HandBrake/HandBrake.git \
            /tmp/handbrake && \
        cd /tmp/handbrake && \
        ./configure \
            --enable-nvenc \
            --enable-qsv \
            --enable-x265 \
            --disable-gtk \
            --launch-jobs=14 \
            --launch \
            --force && \
        make --directory=build install && \
        cp /tmp/handbrake/build/HandBrakeCLI /usr/local/bin/HandBrakeCLI && \
        rm -rdf /tmp/handbrake/ ; \
    fi

RUN if uname -m | grep -q aarch64; then \
        apt-get install -y handbrake-cli ffmpeg && \
        ln -s /usr/bin/ffmpeg /usr/local/bin/tdarr-ffmpeg ; \
    fi

RUN if uname -m | grep -q armv7l; then \
        apt-get install -y handbrake-cli ffmpeg && \
        ln -s /usr/bin/ffmpeg /usr/local/bin/tdarr-ffmpeg ; \
    fi